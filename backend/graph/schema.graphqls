# GraphQL schema for DeGov Apps
#
# https://gqlgen.com/getting-started/

scalar Time

### ==== directives

# Authentication directive
directive @auth(required: Boolean = true) on FIELD_DEFINITION

# Authorization directive for resource ownership
directive @authorize(rule: AuthRule!) on FIELD_DEFINITION

enum AuthRule {
  OWNER_ONLY # User can only access their own resources
  ADMIN_ONLY # Admin only access
  PUBLIC # Public access (no auth required)
}

enum ConfigFormat {
  YAML
  JSON
}

enum LikeAction {
  LIKE
  UNLIKE
}

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXECUTED
  EXPIRED
}

enum AbiType {
  PROXY
  IMPLEMENTATION
}

enum FeatureName {
  PROPOSAL_NEW
  PROPOSAL_STATE_CHANGED
  VOTE_END
  VOTE_EMITTED
}

enum NotificationChannelType {
  EMAIL
  WEBHOOK
}

### ==== entities

type Dao {
  id: ID!
  chainId: Int!
  chainName: String!
  chainLogo: String
  name: String!
  code: String!
  logo: String
  seq: Int!
  endpoint: String! # Website endpoint
  state: String!
  tags: [String!]
  timeSyncd: Time
  metricsCountProposals: Int!
  metricsCountMembers: Int!
  metricsSumPower: String!
  metricsCountVote: Int!
  offsetTrackingProposal: Int!
  ctime: Time!
  utime: Time
  liked: Boolean
  # subscribed: Boolean
  chips: [DaoChip!]
  lastProposal: Proposal
}

type DaoChip {
  id: ID!
  daoCode: String!
  chipCode: String!
  flag: String!
  additional: String
  ctime: Time!
  utime: Time
}

type EvmAbiOutput {
  address: String!
  implementation: String
  abi: String!
  type: AbiType!
}

type Proposal {
  id: ID!
  title: String!
  daoCode: String!
  chainId: Int!
  proposalLink: String!
  proposalId: String!
  state: ProposalState!
  proposalAtBlock: Int!
  proposalCreatedAt: Time!
  timesTrack: Int!
  timeNextTrack: Time
  message: String
  ctime: Time!
  utime: Time
}

type SubscribedDao {
  dao: Dao!
  features: [SubscribedFeature!]!
}

type SubscribedProposal {
  dao: Dao!
  proposal: Proposal!
  features: [SubscribedFeature!]!
}

type SubscribedFeature {
  name: String!
  strategy: String!
}

### === outputs

type GetNonceOutput {
  nonce: String!
}

type LoginOutput {
  token: String!
}

type SubscribedDaoOutput {
  daoCode: String!
  state: String!
}

type SubscribedProposalOutput {
  daoCode: String!
  proposalId: String!
  state: String!
}

type VerifyNotificationChannelOutput {
  code: Int!
  message: String
}

type ResendOTPOutput {
  code: Int!
  # id: String!
  message: String
  expiration: Int
  rateLimit: Int
}

type NotificationChannel {
  id: String!
  channelType: NotificationChannelType!
  channelValue: String!
  verified: Int!
  payload: String
  ctime: Time!
}

type TreasuryAsset {
  chain: String!
  address: String!
  name: String!
  symbol: String!
  logo: String
  native: Int!
  price: String!
  balance: String!
  balanceRaw: String!
  balanceUSD: String!
  displayDecimals: Int!
  historicalPrices: [TreasuryHistoricalPrice!]
}

type TreasuryHistoricalPrice {
  timestamp: Time!
  price: String!
}


### === inputs

input GetNonceInput {
  length: Int
}

input LoginInput {
  message: String!
  signature: String!
}

input GetDaoConfigInput {
  daoCode: String!
  format: ConfigFormat
}

input ModifyLikeDaoInput {
  daoCode: String!
  action: LikeAction!
}

input EvmAbiInput {
  chain: Int!
  contract: String!
}

input BaseNotificationChannelInput {
  type: NotificationChannelType!
  value: String!
}

input VerifyNotificationChannelInput {
  type: NotificationChannelType!
  value: String!
  otpCode: String!
}

# input resendOTPInput {
#   type: NotificationChannelType!
#   value: String!
# }

input FeatureSettingsInput {
  name: FeatureName!
  strategy: String
}

input SubscribeDaoInput {
  daoCode: String!
  features: [FeatureSettingsInput!]
}

input SubscribeProposalInput {
  daoCode: String!
  proposalId: String!
  features: [FeatureSettingsInput!]
}

input UnsubscribeDaoInput {
  daoCode: String!
}

input UnsubscribeProposalInput {
  daoCode: String!
  proposalId: String!
}

input TreasuryAssetsInput {
  chain: String!
  address: String!
}

### ==== graphql

type Query {
  # Auth queries (no authentication required)
  nonce(input: GetNonceInput!): String!

  # DAO queries (no authentication required, but auth info affects result)
  daos: [Dao!]! @auth(required: false)
  likedDaos: [Dao!]! @auth(required: false)
  daoConfig(input: GetDaoConfigInput): String! @auth(required: false)

  # Tool queries
  evmAbi(input: EvmAbiInput!): [EvmAbiOutput!] @auth(required: false)

  # notifications
  listNotificationChannels: [NotificationChannel!] @auth

  # subscribe
  subscribedDaos: [SubscribedDao!]! @auth
  subscribedProposals: [SubscribedProposal!]! @auth

  # treasury
  treasuryAssets(input: TreasuryAssetsInput): [TreasuryAsset!]! @auth(required: false)
}

type Mutation {
  # Auth mutations
  login(input: LoginInput!): LoginOutput!

  # User interactions
  modifyLikeDao(input: ModifyLikeDaoInput!): Boolean! @auth
  # bindNotificationChannel(input: BindNotificationChannelInput!): ResendOTPOutput! @auth
  verifyNotificationChannel(
    input: VerifyNotificationChannelInput!
  ): VerifyNotificationChannelOutput! @auth
  resendOTP(input: BaseNotificationChannelInput!): ResendOTPOutput! @auth

  # subscribe
  subscribeDao(input: SubscribeDaoInput!): SubscribedDaoOutput! @auth
  subscribeProposal(input: SubscribeProposalInput!): SubscribedProposalOutput!
    @auth
  unsubscribeDao(input: UnsubscribeDaoInput!): SubscribedDaoOutput! @auth
  unsubscribeProposal(
    input: UnsubscribeProposalInput!
  ): SubscribedProposalOutput! @auth
}

# type Subscription {
# }
