name: build degov-apps-backend

on:
  push:
    paths:
      - 'backend/**'
      - 'Dockerfile'
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:
  pull_request:
    type: [opened, synchronize, reopened]
  
env:
  TZ: 'Asia/Shanghai'
  DOCKER_REG_HOST: ghcr.io
  DOCKERFILE_PATH: ./backend/Dockerfile  # 保持不变
  DOCKER_BUILD_CONTEXT: ./backend      # 保持不变
  IMAGE_NAME_PREFIX: ${{ github.repository_owner }}  # 自动获取组织/用户名
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Setup environment variables
        id: vars 
        run: |
          # 记录构建开始时间（北京时间）
          echo "BUILD_START_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          
          # 设置分支或标签变量
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            echo "IS_TAG_EVENT=true" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "IS_TAG_EVENT=false" >> $GITHUB_ENV
          fi

          # 确保 REPO_NAME 有效
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}')
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "DOCKER_REG_HOST=ghcr.io" >> $GITHUB_ENV

          #获取PUSH_AUTHOR、SHORT_SHA
          echo "PUSH_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "commitHash=${{ github.sha }}" >> $GITHUB_ENV
          SHORT_SHA=$(git rev-parse --short=8 HEAD)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV

          #获取BUILD_URL、REPO_URL
          BUILD_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "BUILD_URL=${BUILD_URL}" >> $GITHUB_ENV

          # 设置镜像版本（强制保证非空）
          # 专门为 pull_request 事件设置镜像版本
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # 对于PR事件，使用PR编号和短SHA，避免使用包含斜杠的ref
            PR_NUMBER="${{ github.event.pull_request.number }}"
            SHORT_SHA=$(git rev-parse --short=8 HEAD)
            DOCKER_IMAGE_VERSION="pr-${PR_NUMBER}-${SHORT_SHA}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            DOCKER_IMAGE_VERSION="${GITHUB_REF#refs/tags/}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            # 清理分支名称中的非法字符，例如将斜杠替换为破折号
            SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's|/|-|g')
            SHORT_SHA=$(git rev-parse --short=8 HEAD)
            DOCKER_IMAGE_VERSION="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${{ github.run_number }}"
          fi

          # 设置默认值（双重保障）
          DOCKER_IMAGE_VERSION="${DOCKER_IMAGE_VERSION:-latest}"
          echo "DOCKER_IMAGE_VERSION=${DOCKER_IMAGE_VERSION}" >> $GITHUB_ENV

          # 生成镜像名称（严格格式校验）
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${REPO_NAME}-backend:${DOCKER_IMAGE_VERSION}"
          echo "DOCKER_IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "Generated image: ${IMAGE_NAME}"  # 调试输出
      - name: Send start notification
        run: |
          if [[ "${{ env.IS_TAG_EVENT }}" == "true" ]]; then
            MARKDOWN_MSG="# <font color='info'>构建开始</font>\n<font>**组织名称：**${{ env.IMAGE_NAME_PREFIX }}</font>\n<font>**触发成员：**${{ env.PUSH_AUTHOR }}</font>\n<font>**触发时间：**$(date '+%Y-%m-%d %H:%M:%S')</font>\n<font>**事件：**启动构建计划</font>\n# <font>事件内容：</font>\n> Job：${{ github.workflow }}\n> 构建编号：[${{ github.run_id }}](${{ env.BUILD_URL }})\n> 代码仓库：[${REPO_NAME}](${{ env.REPO_URL }})\n> Commit: ${{ env.SHORT_SHA }}\n> 触发方式：${{ env.PUSH_AUTHOR }} 推送到标签 ${{ env.TAG_NAME }} 时触发\n> 状态：开始执行"
          else
            MARKDOWN_MSG="# <font color='info'>构建开始</font>\n<font>**组织名称：**${{ env.IMAGE_NAME_PREFIX }}</font>\n<font>**触发成员：**${{ env.PUSH_AUTHOR }}</font>\n<font>**触发时间：**$(date '+%Y-%m-%d %H:%M:%S')</font>\n<font>**事件：**启动构建计划</font>\n# <font>事件内容：</font>\n> Job：${{ github.workflow }}\n> 构建编号：[${{ github.run_id }}](${{ env.BUILD_URL }})\n> 代码仓库：[${REPO_NAME}](${{ env.REPO_URL }})\n> Commit: ${{ env.SHORT_SHA }}\n> 触发方式：${{ env.PUSH_AUTHOR }} 推送到分支 ${{ env.BRANCH_NAME }} 时触发\n> 状态：开始执行"
          fi
          
          curl -s -X POST https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5de6a4b4-01b4-4c40-af0d-45a3b196a440 \
               -H 'Content-Type: application/json' \
               -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"${MARKDOWN_MSG}\"}}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: aitops@xiequan.info  # 或使用 ${{ github.actor }}
          password: ${{ secrets.Registry }}  # 或使用您提供的 PAT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          build-args: DEPLOY_ENV=${{ env.ENV_TYPE }}
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}-cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}-cache,mode=max

      - name: Checkout GitOps repo
        uses: actions/checkout@v3
        with:
          repository: devows/gitops-ringdao
          ref: main
          path: gitops-repo
          token: ${{ secrets.Registry }}

      - name: Update manifest
        working-directory: gitops-repo
        run: |
          DEPLOY_FILE="appsmanifests/degov-apps-backend/overlays/env/prod/deployment-patch.yaml"
          
          # Verify file exists
          ls -l ./${DEPLOY_FILE}
          
          # Update image in deployment file
          sed -i "s|image: .*|image: ${{ env.DOCKER_IMAGE_NAME }}|" ./${DEPLOY_FILE}
          
          # Commit and push changes
          git config user.email "aitops@xiequan.info"
          git config user.name "aitops01"
          git add ./${DEPLOY_FILE}
          git commit -m "Update image to ${{ env.DOCKER_IMAGE_NAME }}"
          git push origin main
      
      - name: Send success notification
        if: success()
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          # 计算持续时间（使用日期时间戳计算）
          START_TS=$(date -d "${{ env.BUILD_START_TIME }}" +%s)
          END_TS=$(date -d "${CURRENT_TIME}" +%s)
          DURATION_SEC=$((END_TS - START_TS))

          # 格式化为分钟和秒
          MINUTES=$((DURATION_SEC / 60))
          SECONDS=$((DURATION_SEC % 60))
          TOTALTIME="${MINUTES}分${SECONDS}秒"
          
          ARGOCD_URL="https://argocd.xiequan.info/applications/${REPO_NAME}-${ENV_TYPE}?operation=true"
          
          MARKDOWN_MSG="# <font color='info'>构建结束</font>\n>## 触发成员\n${{ env.PUSH_AUTHOR }}\n## 构建详情\n>构建计划: ${{ github.workflow }}\n>构建编号: ${{ github.run_id }}\n>构建制品：${{ env.DOCKER_IMAGE_NAME }}\n>开始时间：${{ env.BUILD_START_TIME }}\n>耗时：${TOTALTIME}\n## 构建结果\n>状态：<font color='info'>成功</font>\n\n[查看构建日志](${{ env.BUILD_URL }})\n[点击跳转ArgoCD](${ARGOCD_URL})"
          
          curl -s -X POST https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5de6a4b4-01b4-4c40-af0d-45a3b196a440 \
               -H 'Content-Type: application/json' \
               -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"${MARKDOWN_MSG}\"}}"

      - name: Send failure notification
        if: failure()
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          START_TS=$(date -d "${{ env.BUILD_START_TIME }}" +%s)
          END_TS=$(date -d "${CURRENT_TIME}" +%s)
          DURATION_SEC=$((END_TS - START_TS))
          MINUTES=$((DURATION_SEC / 60))
          SECONDS=$((DURATION_SEC % 60))
          TOTALTIME="${MINUTES}分${SECONDS}秒"
          
          MARKDOWN_MSG="# <font color='warning'>构建结束</font>\n## 触发成员\n${{ env.PUSH_AUTHOR }}\n## 构建详情\n>构建计划: ${{ github.workflow }}\n>构建编号: ${{ github.run_id }}\n>构建制品：${{ env.DOCKER_IMAGE_NAME }}\n>开始时间：${{ env.BUILD_START_TIME }}\n>耗时：${TOTALTIME}\n## 构建结果\n>状态：<font color='warning'>失败</font>\n\n[查看构建日志](${{ env.BUILD_URL }})"
          
          curl -s -X POST https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5de6a4b4-01b4-4c40-af0d-45a3b196a440 \
               -H 'Content-Type: application/json' \
               -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"${MARKDOWN_MSG}\"}}"